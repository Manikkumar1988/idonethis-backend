# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: ./gradlew test

      - run: ./gradlew build
      - run: ls
      - run:
          name: launching the server
          command: java -jar build/libs/idonethis-backend-1.0-SNAPSHOT.jar
      - run:
          name: Install ruby
          command: sudo apt-get update && sudo apt-get install -y rubygems && sudo apt-get install -y ruby-dev && sudo gem install bundler
      - run:
          name: Should functional test here
          command: bundle install && bundle exec cucumber

      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      # use a primary image that already has Docker (recommended)
      # or install it during a build like we do here
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Buidling docker
          command: docker build -t my-app .
#      - run:
#          name: "Start Service and Check Thats it Running"
#          command: |
#            docker run -d --name my-app my-app
#            docker run --network container:my-app appropriate/curl --retry 10 --retry-connrefused http://localhost:4567/hello
      - run:
          name: Login to heroku ecr
          command: docker login -username=$HEROKU_USERNAME --password=$HEROKU_API_KEY registry.heroku.com
      - run:
          name: Setup Heroku
          command: chmod +x .circleci/setup-heroku.sh
      - run:
          name: setting up heroku container
          command: .circleci/setup-heroku.sh
      - run:
          name: building and pushing image
          command: heroku container:push web --app $HEROKU_APP_NAME_ONE
      - run:
          name: Deploy to Heroku
          command: heroku container:release web --app $HEROKU_APP_NAME_ONE

